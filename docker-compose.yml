version: "3.8"
services:
  kafka1:
    image: bitnami/kafka:${KAFKA_VERSION}
    container_name: kafka1
    hostname: kafka1
    ports:
      - "10001:9091"
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_PROCESS_ROLES: controller, broker
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9091
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://kafka1:10001
      ALLOW_PLAINTEXT_LISTENERS: yes
      KAFKA_KRAFT_CLUSTER_ID: Z2l2ZW1lc3RyZW5ndGg
    networks:
      - orderservice
  kafka2:
    image: bitnami/kafka:${KAFKA_VERSION}
    container_name: kafka2
    hostname: kafka2
    ports:
      - "10002:9091"
    environment:
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_PROCESS_ROLES: controller, broker
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9091
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092,EXTERNAL://kafka2:10002
      ALLOW_PLAINTEXT_LISTENERS: yes
      KAFKA_KRAFT_CLUSTER_ID: Z2l2ZW1lc3RyZW5ndGg
    networks:
      - orderservice
  kafka3:
    image: bitnami/kafka:${KAFKA_VERSION}
    container_name: kafka3
    hostname: kafka3
    ports:
      - "10003:9091"
    environment:
      KAFKA_CFG_NODE_ID: 3
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_PROCESS_ROLES: controller, broker
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9091
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka3:9092,EXTERNAL://kafka3:10003
      ALLOW_PLAINTEXT_LISTENERS: yes
      KAFKA_KRAFT_CLUSTER_ID: Z2l2ZW1lc3RyZW5ndGg
    networks:
      - orderservice

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.0
    container_name: "schema-registry"
    hostname: "schema-registry"
    ports:
      - "8081:8081"
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    environment:
      SCHEMA_REGISTRY_CUB_KAFKA_MIN_BROKERS: 3
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
    networks:
      - orderservice

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "9000:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9092,kafka3:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: true
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: true
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - orderservice

  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "root"
      MONGO_INITDB_ROOT_PASSWORD: "1234"
      MONGO_INITDB_DATABASE: "kafkatest"
    networks:
      - orderservice

  redis:
    image: redis:alpine
    container_name: redis
    hostname: redis
    environment:
      ALLOW_EMPTY_PASSWORD: yes
    networks:
      - orderservice

  backend:
    image: amazoncorretto:17
    container_name: backend
    ports:
      - "8080:8080"
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - redis
      - schema-registry
      - kafka1
      - kafka2
      - kafka3
      - mongodb
      - kafka-ui
    networks:
      - orderservice

networks:
  orderservice:
    driver: bridge